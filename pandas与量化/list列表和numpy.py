'''
Numpy数组中的所有元素的类型都必须相同的，而Python列表中的元素类型是任意的，所以在通用性能方面Numpy数组不及Python列表，但在科学计算中，可以省掉很多循环语句，代码使用方面比Python列表简单的多。

list 列表：
    list是处理一组有序项目的数据结构，即你可以在一个列表中存储一个序列的项目
    你可以增加或删除项目，
    “列表是可变的数据类型”，即这种类型是可以被改变的，如 a=[1,'2','c']
    并且列表是可以嵌套的。

    列表是可以改变的，能够增加或减少，（append和del函数）
'''
x = list()
x.append(1)
x.extend([2,3,4])
print(x)

x = [1,2,3,4,5]
arr=[[1,1],[2,2],[3,3],[4,4]]
print("list:",arr[1:3]) #包前不包后


'''
Numpy是专门针对数组的操作和运算进行了设计，所以数组的存储效率和输入输出性能远优于Python中的嵌套列表，数组越大，Numpy的优势就越明显。
"通常Numpy数组中的所有元素的类型都是相同的"，
而Python列表中的元素类型是任意的，所以在通用性能方面Numpy数组不及Python列表，但在科学计算中，可以省掉很多循环语句，代码使用方面比Python列表简单的多。
在list中的数据类型保存的是数据的存放的地址，简单的说就是指针，并非数据，这样保存一个list就太麻烦了，例如list1=[1,2,3,‘a’]需要4个指针和四个数据，增加了存储和消耗cpu。
numpy中封装的array有很强大的功能，里面存放的都是相同的数据类型
'''
import numpy as np
#常规创建
a=np.array((1,2,3))#参数是tuple
b=np.array([6,7,8])#参数是list
c=np.array([[1,2,3],[4,5,6]])#参数是二维list

#其他方法创建
arr1=np.arange(1,10,1)
arr2=np.linspace(1,10,10)


arr=np.array([[1,2,3],[4,5,6],[7,8,9],[1,1,1]])
print("numpy:",arr[1:3]) #包前不包后



'''
array的索引最终产生的是一个「 原始数据的浅拷贝」，他"和原始数据共用一块内存"。当我们修改了b的第一个元素的时候，a的第一个元素也被修改了。因为他们都是指向的同一个内存。
这是因为当我们执行b=a[:2]等语句的时候，拷贝的是指向这个元素的指针，当我们想要修改的时候，也是修改了指针指向的元素值


list对象在执行的时候拷贝了数据与指针，就不会有这种状况啦。
'''

a=np.array([0,1,2,3])
b=a[:2]
a[0] = 100
print(a)
print(b)

a=[0,1,2,3]
b=a[:2]
a[0] = 100
print(a)
print(b)

