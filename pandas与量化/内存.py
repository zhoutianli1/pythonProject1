'''

'''
'''
动态语言是指程序在运行时可以改变其结构：新的函数可以被引进，已有的函数可以被删除等在结构上的变化。
比如JavaScript、Python都是典型的动态语言，
而C、C++、Java等语言则不属于动态语言。动态类型语言，就是类型的检查是在运行时做的，是不是合法的要到运行时才判断，例如JavaScript就没有编译错误，只要运行错误。2、静态类型静态类型语言的类型判断是在运行前判断（如编译阶段），比如java就是静态类型语言，静态类型语言为了达到多态会采取一些类型鉴别手段，如继承、接口，而动态类型语言却不需要。

静态类型语言：变量定义时有类型声明的语言。

（1）变量的类型在编译的时候确定
（2）变量的类型在运行时不能修改
（3）变量的类型必须先声明，即在创建的那一刻就已经确定好变量的类型，如int a

这样编译器就可以确定运行时需要的内存总量。
例如：C、Scala、Java、F#语言是静态类型语言。

动态类型语言：变量定义时无类型声明的语言。

（1）变量的类型在运行的时候确定
（2）变量的类型在运行可以修改
（3）Python 的变量(variable)不需要声明，而在赋值时，变量可以重新赋值为任意值，这些都与动态类型的概念相关。

例如：python、Javascript、Ruby语言是动态类型语言。

强类型定义语言
强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。举个例子：如果你定义了一个整型变量a,那么程序根本不可能将a当作字符串类型处理。强类型定义语言是类型安全的语言。
弱类型定义语言
数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。强类型定义语言在速度上可能略逊色于弱类型定义语言，但是强类型定义语言带来的严谨性能够有效的避免许多错误。
综上所述：Java是在编译时期确定的变量类型且在运行时期不能改变，在类型转换方面也是强制的，例如大范围整数类型转换为小范围整数类型时必须要强转，如 int 必须强制转换才能得到小范围类型 byte。所以Java是静态、强类型语言。
'''


'''
静态类型赋值：
基本类型 int x = 5;
变量 x 保存的是值 5，而不是地址。

基本类型存储了实际的数值，而并非指向一个对象的引用，所以在为其赋值的时候，是直接从一个地方赋值到了另外一个地方，
此时赋值的是变量所保存的数据值。
如java中,基本类型 栈存储了实际的数值 ； 引用类型 栈存储了数值引用 ； 

栈                堆
int i=1
double j=2


int[]arr 001-->  001 new int[3]


在 Python中，一切皆对象。对象是储存在内存中的实体。但我们并不能直接接触到该对象。我们在程序中写的对象名，只是指向这一对象的引用(reference)。
比如定义a =1 ，a = ‘a’，一开始定义了变量 a 为指向了整型的对象，然后变量又指向了字符串类型的对象，可见，变量是不固定的类型。

当我们给变量赋值的时候，比如 a=5，python 执行三个不同操作去完成赋值。
创建一个对象代表 5
如果程序中没有变量 a，则创建他。
将变量与对象 5 连接起来。

'''
